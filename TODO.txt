Not Finished Yet
===============

Almost done:
------------

These sections still need to be audited:
- queue certificates - process
- automatic renewal - update to create queues
- creating queue-certificates/freeform (domains)

- remove checks for `.acme_order_id__created` as it is not-null
`


Audit/Remove "todo" markers


asap tasks
---------------

TESTS:
	AcmeAccount
		submit a different key for an existing contact

	api/domain/autocert
		test against different strategies
		- dogpile defense
		- repeat request, correct data

EDIT:
	AcmeOrder:
		change "PrivateKeyCycle - renewals"
		??xx?? add "is_via_emergency"

* CA Certificates / AcmeOrders
** if the fullchain has more than one certificate, track it as an intermediary
** should CA Certificates just be normal certificates with a flag?

* integrate ALEMEBIC and migrate the database_migrations file to it

====

* QueueDomain
	* processing
	- include an offset of the last domain added, so there isn't a race condition
	- before creating an acme-order, run a HTTP test on all the domains(!) to ensure it works

* ServerCertificate
	* TESTS
	- test for a situation where the dbPrivateKey for a certificate is deactivated before deactivating a certificate
	- test for a situation where the dbPrivateKey for a certificate is deactivated before queuring a renewal

* CoverageAssuranceEvent
	- on form display, show only eligible transitions(resolutions)

* AcmeDns
	- an AcmeOrder should be able to select domain names for DNS-01 challenges
	- AcmeDNSServerAccount should be able to sync and update against the server
		- /update is trivial
		- sync is complex, because it requires a DNS lookup
	- how to AcmeDNS?

		/.well-known/admin/acme-order/{ID}
			list the challenge types

		/.well-known/admin/acme-order/new/freeform
			domain_names -> domain_names_http01 + domain_names_dns01

		/.well-known/admin/acme-order/{ID}/renew/quick
			list the challenge types

		/.well-known/admin/queue-certificate/new/structured
			list the challenge types

		/.well-known/admin/queue-certificate/new/structured
			list the challenge types

		/.well-known/admin/acme-order/{ID}/renew/custom
			list the challenge types



* AcmeAccountKey
	- letsencrypt_data - audit. refresh? log?

* AcmeOrder
	- create an endpoint to sync all pending orders against ACME server
	- this is needed on testing and large installs

* UniqueFQDNSet
	- allow a set to be decomposed into one or more sets
	- for example:
		- original set: [a.example.com, b.example.com, c.example.com,]
		- new set(s): [a.example.com,]; [b.example.com, c.example.com,]
		- new set(s): [a.example.com,]


* ensure self-documenting endpoints POST on mako

    # TODO: POST REQUIRED








* cert_utils
	figure out how to emulate openssl's `--text` with crypto in `parse_key`

* search expiring soon | note: isn't this the `/server-certificates/expiring` view?
* log full actual results; if a queue fails log that data too
	this happens to standard python logging
* associate all objects to one another when imported; only some objects are currently associated
* limit pending request search to 7 days

deferred tasks
---------------
* take into account the validity of existing LetsEncrypt authz and challenges when requesting certs
* create tool for exporting and deleting the logs
* finish rate limit calendars
* upload CERT/Chains for 'flow' CSR | once the flow is finished, upload a cert into it.
* there should be a queue for multi-domain certificates too.  ie, request a cert for A+B+C, which could remove items from the domain queue
* add "operations" and "endpoints" to `.json` endpoints of core records. this should make commandline operations via curl easier.
* migrate testing away from `setup.py`
* `account__private_key_cycle` is required on all forms but often unused
	it should be conditional, based on the presences of uploading a new account-key


Long Term Questions:
==================================
* remove pyramidtm? migrate to autocommit?


Test Cases to Write
===================

Case A:
	create order
		sync order authorizations
	visit account:
		deactivate account authorizations
	visit order authorizations:
		check order authorization:
			- it should be invalid
			- challenges should be 410
	visit order:
		check order:
			- it should be invalid/deactivated

Case B:
	Create an order
	destroy the order on the acme server
	sync the order to the acme server



