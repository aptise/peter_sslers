Not Finished Yet
===============

Almost done:
------------
	
These sections still need to be redone:
- queue certificates - proces
- automatic renewal - update to create queues
- creating queue-certificates/freeform (domains)
order processing
	- if a challenge fails, make the order invalid OR sync the order to invalid
	- - rfc states a failed challenge invalidates an auth; and an invalid auth invalidates an order
AcmeOrder:
    dbQueueCertificate__of:
    dbServerCertificate__renewal_of:
certificate renewal
	- object should show if we can renew with account key; or maybe not. just allow it to be renewed
	- better programmatic work is needed when cycling a multi-process request
remove todo
	
asap tasks
---------------

route: "admin:api:domain:autocert", "/api/domain/autocert"
	just accept a single domain,
	run the entire process using the global account key, and a new private key, in a single request

TESTS:
	AcmeOrder
		mark
			renew_auto
			renew_manual
	AcmeAccount
		submit a different key for an existing contact

EDIT:
	AcmeOrder:
		change "PrivateKeyCycle - renewals"
		??xx?? add "is_via_emergency"

* account_key_default ? audit?

* CA Certificates / AcmeOrders
** if the fullchain has more than one certificate, track it as an intermediary
** should CA Certificates just be normal certificates with a flag?


====		

* Queue Processing
- include an offset of the last domain added, so there isn't a race condition

* ServerCertificate
- test for a situation where the dbPrivateKey for a certificate is deactivated before deactivating a certificate
- test for a situation where the dbPrivateKey for a certificate is deactivated before queuring a renewal

* CoverageAssuranceEvent
	- on form display, show only eligible transitions(resolutions)

* AcmeDns - finish support
	- an AcmeOrder should be able to select domain names for DNS-01 challenges
	
* AcmeAccountKey.letsencrypt_data - audit. refresh? log?

* ensure self-documenting endpoints POST on mako
    @view_config(route_name='admin:queue_domains:process', renderer=None)
    @view_config(route_name='admin:queue_domains:process|json', renderer='json')
    def queue_domain_process(self):

* cert_utils
	figure out how to emulate openssl's `--text` with crypto in `parse_key`
	


* search expiring soon | note: isn't this the `/server-certificates/expiring` view?
* log full actual results; if a queue fails log that data too
	this happens to standard python logging
* associate all objects to one another when imported; only some objects are currently associated
* limit pending request search to 7 days

deferred tasks
---------------
* take into account the validity of existing LetsEncrypt authz and challenges when requesting certs
* create tool for exporting and deleting the logs
* finish rate limit calendars
* upload CERT/Chains for 'flow' CSR | once the flow is finished, upload a cert into it.
* there should be a queue for multi-domain certificates too.  ie, request a cert for A+B+C, which could remove items from the domain queue
* add "operations" and "endpoints" to `.json` endpoints of core records. this should make commandline operations via curl easier.
* migrate testing away from `setup.py`
* `account__private_key_cycle` is required on all forms but often unused
	it should be conditional, based on the presences of uploading a new account-key


Long Term Questions:
==================================
* remove pyramidtm? migrate to autocommit?  

