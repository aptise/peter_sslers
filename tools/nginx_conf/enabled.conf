http {

    ## defaults
    default_type application/octet-stream;
    include /usr/local/nginx/conf/mime.types;
    
    ## default options
    sendfile  on;
    keepalive_timeout  70;
    gzip  on;
    server_tokens  off;
    rewrite_log  on;
    client_max_body_size  10m;


    ## lua
    lua_package_path  "/path/to/peter_sslers/tools/nginx_lua_library/?.lua;/path/to/peter_sslers/tools/lua-lib/lua-resty-http/lib/?.lua;;";
    init_by_lua  'require "resty.core"';
    lua_shared_dict  cert_cache 1m;
    lua_code_cache  on;


    ## Our FAILOVER SECURE server should grab
    ## any gosh-darn domain name out there!
    server  {
        listen  443 default_server;
        server_name  foo.example.com;

        ## logging
        access_log  /var/log/nginx/foo.example.com/access-https.log;
        error_log  /var/log/nginx/foo.example.com/error-https.log notice;

		## set our cache expiry        
        location  /ngxadmin/shared_cache/expire  {
            content_by_lua_block  {
                local ssl_certhandler = require "ssl_certhandler"

                -- Local cache related
                local cert_cache = ngx.shared.cert_cache

                ssl_certhandler.expire_ssl_certs(cert_cache)
            }
        }

        ## SSL controls
        ssl  on;

        ssl_session_cache  shared:SSL:10m;
        ssl_session_timeout  1d;

        ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers  on;

        ssl_stapling  on;
        ssl_stapling_verify  on;
        
        add_header  Access-Control-Allow-Origin http://127.0.0.1;
        ## HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header  Strict-Transport-Security max-age=15768000;

        ## this is our default
        ssl_certificate  /path/to/default/fullchain1.pem ;
        ssl_certificate_key  /path/to/default/privkey1.pem ;

        ## this will overwrite
        ssl_certificate_by_lua_block  {
            local ssl_certhandler = require "ssl_certhandler"

            -- Local cache related
            local cert_cache = ngx.shared.cert_cache
            local cert_cache_duration = 7200 -- 2 hours

            local prime_version = 2
            local fallback_server = 'http://0.0.0.0:6543'
            ssl_certhandler.set_ssl_certificate(cert_cache, cert_cache_duration, prime_version, fallback_server)

            return
        }
    }
}